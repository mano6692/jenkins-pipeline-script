pipeline {
    
    agent any
    tools {
        
        nodejs 'node-21'
    }
    environment {
        SCANNER_HOME=tool 'sonar-scanner'
    }
    
    stages {
        stage ('clean workspace') {
            steps {
                cleanWs()
            }
        }
        
        stage ('git-checkout') {
            steps {
                git branch: 'main', credentialsId: 'GIT-CRED', url: 'https://github.com/mano6692/devops-netflix-project.git'
            }
        }
        
        stage("Sonarqube Analysis "){
            steps{
                withSonarQubeEnv('sonar-server') {
                    sh ''' $SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=Netflix \
                    -Dsonar.projectKey=Netflix '''
    
                }
            }
        }
        
         stage("quality gate"){
           steps {
                script {
                    waitForQualityGate abortPipeline: false, credentialsId: 'sonar-cred' 
                }
            } 
        }
        
         stage('Install Dependencies') {
            steps {
                sh "npm install"
            }
        }
        
        stage('OWASP FS SCAN') {
            steps {
                dependencyCheck additionalArguments: '--scan ./ --disableYarnAudit --disableNodeAudit', odcInstallation: 'DP-CHECK'
                dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
            }
        }
        
        stage('TRIVY FS SCAN') {
            steps {
                sh "trivy fs . > trivyfs.txt"
            }
        }
        
        stage('docker build') {
            steps {
                sh 'docker build -t netflix-project .'
                
            }
        }
        
        stage("TRIVY scan-docker image"){
            steps{
                sh "trivy image netflix-project:latest > trivyimage.txt"
                sh 'echo image-scan completed'
            }
        }
        
        stage ('docker tag') {
            steps {
                sh 'docker tag netflix-project mano6692/netflix-project'
            }
        }
        
        stage ('docker image push to docker hub') {
            steps {
               script {
                   withDockerRegistry(credentialsId: 'DOCKER-CRED', toolName: 'docker') {
                       sh 'docker push mano6692/java-file:latest'
                   }
                 
               } 
            }
        }
    }
    post {
     always {
        emailext attachLog: true,
            subject: "'${currentBuild.result}'",
            body: "Project: ${env.JOB_NAME}<br/>" +
                "Build Number: ${env.BUILD_NUMBER}<br/>" +
                "URL: ${env.BUILD_URL}<br/>",
            to: 'mano6692@gmail.com',                                
            attachmentsPattern: 'trivyfs.txt,trivyimage.txt'
        }
    }
}
